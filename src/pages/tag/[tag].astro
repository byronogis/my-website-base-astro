---
import { getCollection } from 'astro:content'
import PostListLayout from '~/layouts/PostList.astro'
import type { PostCollectionEntry } from '~/types'

export async function getStaticPaths() {
  const posts = (await Promise.all([getCollection('essay'), getCollection('manual')])).flat(1)

  const tagsMap = posts.reduce((acc, post) => {
    post.data.tags?.forEach(tag => {
      if (!acc[tag]) {
        acc[tag] = []
      }
      acc[tag].push(post)
    })
    return acc
  }, {} as Record<string, PostCollectionEntry[]>)

  return Object.keys(tagsMap).map(tag => {
    tagsMap[tag].sort((a, b) => {
      const aDate = a.data.update || a.data.date
      const bDate = b.data.update || b.data.date
      return bDate.valueOf() - aDate.valueOf()
    })

    return {
      params: { tag },
      props: { posts: tagsMap[tag] },
    }
  })
}

const posts: PostCollectionEntry[] = Astro.props.posts
---
<PostListLayout posts={posts}></PostListLayout>
