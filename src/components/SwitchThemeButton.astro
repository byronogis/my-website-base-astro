---
const { size } = Astro.props
---

<div class="out switch-theme-button">
  <div class="in"></div>
</div>

<script>
  function updateHTMLTheme(mode: 'light' | 'dark') {
    const classList = document.documentElement.classList
    const themeColorMetaTag: HTMLMetaElement = document.head.querySelector('meta[name="theme-color"]')

    if (mode === 'dark') {
      classList.add('dark')
      themeColorMetaTag && (themeColorMetaTag.content = '#262626')
    }
    else {
      classList.remove('dark')
      themeColorMetaTag && (themeColorMetaTag.content = '#ffffff')
    }
  }
  function updateStorageTheme(mode: 'light' | 'dark') {
    sessionStorage.setItem('theme', mode)
  }

  const btn = document.querySelector('.switch-theme-button')
  btn.addEventListener('click', () => {
    const classList = document.documentElement.classList
    if (classList.contains('dark')) {
      updateHTMLTheme('light')
      updateStorageTheme('light')
    }
    else {
      updateHTMLTheme('dark')
      updateStorageTheme('dark')
    }
  })
</script>

<style define:vars={{ size }}>
  .out {
    display: inline-block;
    width: var(--size);
    height: calc(var(--size)*0.5);
    padding: calc(var(--size)*0.1);
    border-radius: var(--size);
    background-color: var(--color-primary-main);
    box-sizing: border-box;
    cursor: pointer;
    line-height: calc(var(--size)*0.3);
    transition: padding-left .3s ease-out;
  }
  .out .in {
    width: calc(var(--size)*0.3);
    height: calc(var(--size)*0.3);
    border-radius: var(--size);
    background-color: var(--color-bg-body);
  }
  html.dark .out {
    padding-left: calc(var(--size)*0.6);
  }
</style>
